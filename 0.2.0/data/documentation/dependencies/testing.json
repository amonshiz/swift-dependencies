{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the article "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/LivePreviewTest"},{"type":"text","text":" you learned how to define a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" "},{"type":"text","text":"when registering your dependencies, which will be automatically used during tests. In this article"},{"type":"text","text":" "},{"type":"text","text":"we cover more detailed information about how to actually write tests with overridden dependencies,"},{"type":"text","text":" "},{"type":"text","text":"as well as some tips and gotchas to keep in mind."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Altered-execution-contexts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Changing-dependencies-during-tests"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-gotchas"}]}]}]},{"anchor":"Altered-execution-contexts","level":2,"type":"heading","text":"Altered execution contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to completely alter the execution context in which a feature’s logic runs, which is"},{"type":"text","text":" "},{"type":"text","text":"great for tests. It means your feature doesn’t need to actually make network requests just to test"},{"type":"text","text":" "},{"type":"text","text":"how your feature deals with data returned from an API, and your feature doesn’t need to interact"},{"type":"text","text":" "},{"type":"text","text":"with the file system just to test how data gets loaded or persisted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tool for doing this is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-3vrqy"},{"type":"text","text":", which allows you to specify"},{"type":"text","text":" "},{"type":"text","text":"which dependencies should be overriden for the test, and then construct your feature’s model"},{"type":"text","text":" "},{"type":"text","text":"in that context:"}]},{"type":"codeListing","syntax":"swift","code":["func testFeature() async {","  let model = withDependencies { ","    $0.continuousClock = ImmediateClock()","    $0.date.now = Date(timeIntervalSince1970: 1234567890)","  } operation: {","    FeatureModel()","  }","","  \/\/ Call methods on `model` and make assertions","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As long as all of your dependencies are declared with "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" as instance properties on"},{"type":"text","text":" "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":", its entire execution will happen in a context in which any reference to"},{"type":"text","text":" "},{"type":"codeVoice","code":"continuousClock"},{"type":"text","text":" is an "},{"type":"codeVoice","code":"ImmediateClock"},{"type":"text","text":" and any reference to "},{"type":"codeVoice","code":"date.now"},{"type":"text","text":" will always report that"},{"type":"text","text":" "},{"type":"text","text":"the date is “Feb 13, 2009 at 3:31 PM”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that if "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":" creates "},{"type":"emphasis","inlineContent":[{"type":"text","text":"other"}]},{"type":"text","text":" models inside its methods, then it"},{"type":"text","text":" "},{"type":"text","text":"has to be careful about how it does so. In order for "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":"’s dependencies to propagate"},{"type":"text","text":" "},{"type":"text","text":"to the new child model, it must construct the child model in an altered execution context that"},{"type":"text","text":" "},{"type":"text","text":"passes along the dependencies. The tool for this is"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(from:operation:file:line:)-2qx0c"},{"type":"text","text":" and can be used simply like this:"}]},{"type":"codeListing","syntax":"swift","code":["class FeatureModel: ObservableObject {","  \/\/ ...","","  func buttonTapped() {","    self.child = withDependencies(from: self) {","      ChildModel()","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guarantees that when "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":"’s dependencies are overridden in tests that it will also"},{"type":"text","text":" "},{"type":"text","text":"trickle down to "},{"type":"codeVoice","code":"ChildModel"},{"type":"text","text":"."}]},{"anchor":"Changing-dependencies-during-tests","level":2,"type":"heading","text":"Changing dependencies during tests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it is most common to set up all dependencies at the beginning of a test and then make"},{"type":"text","text":" "},{"type":"text","text":"assertions, sometimes it is necessary to also change the dependencies in the middle of a test."},{"type":"text","text":" "},{"type":"text","text":"This can be very handy for modeling test flows in which a dependency is in a failure state at"},{"type":"text","text":" "},{"type":"text","text":"first, but then later becomes successful."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose we have a login feature such that if you try logging in and an error is thrown"},{"type":"text","text":" "},{"type":"text","text":"causing a message to appear. But then later, if login succeeds that message goes away. We can"},{"type":"text","text":" "},{"type":"text","text":"test that entire flow, from end-to-end, but starting the API client dependency in a state where"},{"type":"text","text":" "},{"type":"text","text":"login fails, and then later change the dependency so that it succeeds using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-3vrqy"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func testRetryFlow() async {","  let model = withDependencies { ","    $0.apiClient.login = { email, password in ","      struct LoginFailure: Error {}","      throw LoginFailure()","    }","  } operation: {","    LoginModel()","  }","","  await model.loginButtonTapped()","  XCTAssertEqual(model.errorMessage, \"We could not log you in. Please try again\")","","  withDependencies {","    $0.apiClient.login = { email, password in ","      LoginResponse(user: User(id: 42, name: \"Blob\"))","    }","  } operation: {","    await model.loginButtonTapped()","    XCTAssertEqual(model.errorMessage, nil)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though the "},{"type":"codeVoice","code":"LoginModel"},{"type":"text","text":" was created in the context of the API client failing it still sees"},{"type":"text","text":" "},{"type":"text","text":"the updated dependency when run in the new "},{"type":"codeVoice","code":"withDependencies"},{"type":"text","text":" context."}]},{"anchor":"Testing-gotchas","level":2,"type":"heading","text":"Testing gotchas"},{"anchor":"Testing-host-application","level":3,"type":"heading","text":"Testing host application"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is not well known, but when an application target runs tests it actually boots up a simulator"},{"type":"text","text":" "},{"type":"text","text":"and runs your actual application entry point in the simulator. This means while tests are running,"},{"type":"text","text":" "},{"type":"text","text":"your application’s code is separately also running. This can be a huge gotcha because it means you"},{"type":"text","text":" "},{"type":"text","text":"may be unknowingly making network requests, tracking analytics, writing data to user defaults or"},{"type":"text","text":" "},{"type":"text","text":"to the disk, and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This usually flies under the radar and you just won’t know it’s happening, which can be problematic."},{"type":"text","text":" "},{"type":"text","text":"But, once you start using this library to control your dependencies the problem can surface in a"},{"type":"text","text":" "},{"type":"text","text":"very visible manner. Typically, when a dependency is used in a test context without being overridden,"},{"type":"text","text":" "},{"type":"text","text":"a test failure occurs. This makes it possible for your test to pass successfully, yet for some"},{"type":"text","text":" "},{"type":"text","text":"mysterious reason the test suite fails. This happens because the code in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"app host"}]},{"type":"text","text":" is now"},{"type":"text","text":" "},{"type":"text","text":"running in a test context, and accessing dependencies will cause test failures."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This only happens when running tests in a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"application target"}]},{"type":"text","text":", that is, a target that is"},{"type":"text","text":" "},{"type":"text","text":"specifically used to launch the application for a simulator or device. This does not happen when"},{"type":"text","text":" "},{"type":"text","text":"running tests for frameworks or SwiftPM libraries, which is yet another good reason to modularize"},{"type":"text","text":" "},{"type":"text","text":"your code base."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you aren’t in a position to modularize your code base right now, there is a quick"},{"type":"text","text":" "},{"type":"text","text":"fix. Our "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay"},{"type":"text","text":" library, which is transitively included"},{"type":"text","text":" "},{"type":"text","text":"with this library, comes with a property you can check to see if tests are currently running. If"},{"type":"text","text":" "},{"type":"text","text":"they are, you can omit the entire entry point of your application:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import XCTestDynamicOverlay","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      if !_XCTIsTesting {","        \/\/ Your real root view","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That will allow tests to run in the application target without your actual application code"},{"type":"text","text":" "},{"type":"text","text":"interfering."}]},{"anchor":"Statically-linking-your-tests-target-to-Dependencies","level":3,"type":"heading","text":"Statically linking your tests target to `Dependencies`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you statically link the "},{"type":"codeVoice","code":"Dependencies"},{"type":"text","text":" module to your tests target, its implementation may clash"},{"type":"text","text":" "},{"type":"text","text":"with the implementation that is statically linked to the app itself. It then may use a different"},{"type":"text","text":" "},{"type":"codeVoice","code":"DependencyValues"},{"type":"text","text":" base type in the app and in tests, and you may encounter test failures where"},{"type":"text","text":" "},{"type":"text","text":"dependency overrides performed with "},{"type":"codeVoice","code":"withDependencies"},{"type":"text","text":" seem ineffective."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In such cases Xcode will display multiple warnings similar to:"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Class _TtC12Dependencies[…] is implemented in both […] and […]."},{"type":"text","text":" "},{"type":"text","text":"One of the two will be used. Which one is undefined."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The solution is to remove the static link to "},{"type":"codeVoice","code":"Dependencies"},{"type":"text","text":" from your test target, as you"},{"type":"text","text":" "},{"type":"text","text":"transitively get access to it through the app itself. In Xcode, go to “Build Phases” and remove"},{"type":"text","text":" "},{"type":"text","text":"“Dependencies” from the “Link Binary With Libraries” section. When using SwiftPM, remove the"},{"type":"text","text":" "},{"type":"text","text":"“Dependencies” entry from the "},{"type":"codeVoice","code":"testTarget"},{"type":"text","text":"‘s’ "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" array in "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/dependencies\/testing"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Dependencies\/documentation\/Dependencies\/Testing","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"One of the main reasons to control dependencies is to allow for easier testing. Learn some tips and"},{"type":"text","text":" "},{"type":"text","text":"tricks for writing better tests with the library."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Testing","role":"article","modules":[{"name":"Dependencies"}]},"hierarchy":{"paths":[["doc:\/\/Dependencies\/documentation\/Dependencies"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Dependencies\/documentation\/Dependencies\/UsingDependencies","doc:\/\/Dependencies\/documentation\/Dependencies\/RegisteringDependencies","doc:\/\/Dependencies\/documentation\/Dependencies\/LivePreviewTest"],"generated":true}],"references":{"#Testing-gotchas":{"title":"Testing gotchas","titleInlineContent":[{"type":"text","text":"Testing gotchas"}],"type":"link","identifier":"#Testing-gotchas","url":"#Testing-gotchas"},"doc://Dependencies/documentation/Dependencies/withDependencies(_:operation:)-3vrqy":{"role":"symbol","title":"withDependencies(_:operation:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withDependencies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Updates the current dependencies for the duration of an asynchronous operation."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-3vrqy","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/withdependencies(_:operation:)-3vrqy"},"doc://Dependencies/documentation/Dependencies/RegisteringDependencies":{"role":"article","title":"Registering dependencies","abstract":[{"type":"text","text":"Learn how to register your own dependencies with the library so that they immediately become"},{"type":"text","text":" "},{"type":"text","text":"available from any part of your code base."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/RegisteringDependencies","kind":"article","type":"topic","url":"\/documentation\/dependencies\/registeringdependencies"},"doc://Dependencies/documentation/Dependencies/TestDependencyKey/testValue":{"defaultImplementations":1,"role":"symbol","title":"testValue","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"testValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The test value for the dependency key."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/dependencies\/testdependencykey\/testvalue"},"doc://Dependencies/documentation/Dependencies/withDependencies(from:operation:file:line:)-2qx0c":{"role":"symbol","title":"withDependencies(from:operation:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withDependencies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Model"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Model"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Updates the current dependencies for the duration of an asynchronous operation by taking the"},{"type":"text","text":" "},{"type":"text","text":"dependencies tied to a given object."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(from:operation:file:line:)-2qx0c","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/withdependencies(from:operation:file:line:)-2qx0c"},"http://github.com/pointfreeco/xctest-dynamic-overlay":{"title":"XCTest Dynamic Overlay","titleInlineContent":[{"type":"text","text":"XCTest Dynamic Overlay"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay","url":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay"},"#Changing-dependencies-during-tests":{"title":"Changing dependencies during tests","titleInlineContent":[{"type":"text","text":"Changing dependencies during tests"}],"type":"link","identifier":"#Changing-dependencies-during-tests","url":"#Changing-dependencies-during-tests"},"doc://Dependencies/documentation/Dependencies":{"role":"collection","title":"Dependencies","abstract":[{"type":"text","text":"A dependency management library inspired by SwiftUI’s “environment.”"}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies","kind":"symbol","type":"topic","url":"\/documentation\/dependencies"},"doc://Dependencies/documentation/Dependencies/UsingDependencies":{"role":"article","title":"Using dependencies","abstract":[{"type":"text","text":"Learn how to use the dependencies that are registered with the library."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/UsingDependencies","kind":"article","type":"topic","url":"\/documentation\/dependencies\/usingdependencies"},"#Altered-execution-contexts":{"title":"Altered execution contexts","titleInlineContent":[{"type":"text","text":"Altered execution contexts"}],"type":"link","identifier":"#Altered-execution-contexts","url":"#Altered-execution-contexts"},"doc://Dependencies/documentation/Dependencies/LivePreviewTest":{"role":"article","title":"Live, preview, and test dependencies","abstract":[{"type":"text","text":"Learn how to provide different implementations of your dependencies for use in the live application,"},{"type":"text","text":" "},{"type":"text","text":"as well as in Xcode previews, and even in tests."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/LivePreviewTest","kind":"article","type":"topic","url":"\/documentation\/dependencies\/livepreviewtest"}}}